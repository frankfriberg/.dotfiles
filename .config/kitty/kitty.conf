# vim:fileencoding=utf-8:foldmethod=marker
include ./theme.conf
# vim:ft=kitty:fdm=marker
editor nvim

# REF:
# extremely useful settings/options:
# https://github.com/akinsho/dotfiles/blob/main/.config/kitty/kitty.conf
# https://paul-nameless.com/mastering-kitty.html
# https://github.com/p-kolacz/.dotfiles/tree/master/kitty/.config/kitty/colors
# https://github.com/kovidgoyal/kitty/issues/2238 (fzf + kitty icat)

# --( kittens ) --
# https://github.com/kovidgoyal/kitty/tree/master/kittens
# https://github.com/trygveaa/kitty-kitten-search
# https://github.com/muchzill4/kitty-session
# https://dev.to/dylanirlbeck/kitty-sessions-44j2 (blog)
# https://github.com/muchzill4/setup/blob/master/dotfiles/fish/.config/fish/functions/kt.fish
# https://github.com/ad-on-is/kittens
# https://github.com/guysherman/kittymux
# https://github.com/knubie/vim-kitty-navigator
# https://github.com/fretboardfreak/kitty-theme-changer
# https://github.com/kassio/dotfiles/tree/main/config/xdg/kitty/kitty_search

# when kitty launches an editor in a separate window (via cmd+,), that window
# does not have access to env vars set in zshenv :(. This causes vim to complain

# export this so that programs like lazygit launched from kitty know where to
# look for their config
env XDG_DATA_HOME=/Users/ff/.local/share
env XDG_CONFIG_HOME=/Users/ff/.config
env XDG_CACHE_HOME=/Users/ff/.cache
env XDG_STATE_HOME=/Users/ff/.local/state
env XDG_RUNTIME_DIR=/tmp
env PATH=/Users/ff/.dotfiles/bin:$PATH

# --[ fonts ] -------------------------------------------------------------- {{{
# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants.

# kitty recommends not to use patched fonts:
# REF: https://github.com/kovidgoyal/kitty/discussions/4654
#
# You can get a list of full family names available on your computer by running
# kitty list-fonts

# --( jetbrains mono ) ---------------------------------------------------------

font_family                     JetBrainsMonoNL Nerd Font Mono
bold_font                       JetBrainsMonoNL Nerd Font Mono Bold
italic_font                     JetBrainsMonoNL Nerd Font Mono Italic
bold_italic_font                JetBrainsMonoNL Nerd Font Mono Bold Italic

font_size                       15.0
modify_font                     underline_position 150%
modify_font                     underline_thickness 1.10
modify_font                     cell_height 110%
/* symbol_map                      U+EA60-U+EBEB codicon */
symbol_map U+f101-U+f25c nonicons

# }}}

# disable ligatures when the cursor is over them so they are easier to edit
force_ltr yes

# --[ cursor ] ------------------------------------------------------------- {{{
cursor                          none
# The cursor shape can be one of (block, beam, underline)
# cursor_shape     block
cursor_stop_blinking_after      10.0
pointer_shape_when_dragging     hand
# }}}

# --[ mouse ] -------------------------------------------------------------- {{{
copy_on_select                  yes
# -1 effectively means infinite scrollback
scrollback_lines                20000
# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
# rectangle_select_modifiers ctrl+alt
mouse_hide_wait                 15
# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse             yes
# map cmd+left click to open URLs
# mouse_map super+left release grabbed,ungrabbed mouse_handle_click link
# mouse_map cmd+shift+left release ungrabbed pass_selection_to_program $HOME/.config/kitty/scripts/safari-with-http
mouse_map cmd+left release ungrabbed pass_selection_to_program /usr/bin/open
mouse_map cmd+left click grabbed,ungrabbed mouse_handle_click selection link prompt
# }}}

# --[ bells ] -------------------------------------------------------------- {{{
enable_audio_bell               no
window_alert_on_bell            no
visual_bell_duration            0.0
visual_bell_color               none
# }}}

# --[ windows ] ------------------------------------------------------------ {{{
remember_window_size            yes
# enabled_layouts                 tall:bias=55;tall:bias=50;full_size=1;stack;fat;grid;horizontal;split;mirrored=false;splits;
# enabled_layouts                 tall,vertical,stack
enabled_layouts                 splits, stack
window_border_width             1.0
window_margin_width             0.0
# NOTE: t r b l
window_padding_width 0
window_padding_height 0
placement_strategy              top-left
# inactive_text_alpha             0.8
# (static,scale,size)
resize_draw_strategy            static
# dim_opacity 0.90
#}}}

# --[ tabs ] --------------------------------------------------------------- {{{
tab_bar_edge bottom
tab_bar_align left
tab_bar_style separator
tab_bar_min_tabs 1
tab_activity_symbol none
bell_on_tab no
tab_separator ""
tab_bar_margin_width 0.0
tab_bar_margin_height 0.0 0.0
tab_title_template " {fmt.fg.tab}#{index} {title} "
active_tab_font_style   bold

# --[ advanced ] ----------------------------------------------------------- {{{
# HACK: passing environment variables to GUI applications in macOS is very hard
# so this works around that by specifying the path to homebrew installations here
# this only provides the $PATH not all the missing environment variables.
# NOTE: this is wy nvim must be started inside this file using zsh -c 'nvim'
# env PATH=/opt/homebrew/bin/:/usr/local/bin/:${PATH}

# The shell program to execute. The default value of . means
# to use whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login to
# ensure that the shell starts in interactive mode and reads its startup rc files.
shell_integration               enabled
allow_remote_control            yes
# listen_on                       tcp:localhost:45876
listen_on                       unix:/tmp/mykitty
editor                          nvim
term                            xterm-kitty
single-instance                 yes
#}}}

# --[ sessions ] ----------------------------------------------------------- {{{
# https://sw.kovidgoyal.net/kitty/overview/#startup-sessions
# REF:
# - https://dev.to/dylanirlbeck/kitty-sessions-44j2
# - https://github.com/kovidgoyal/kitty/discussions/4066#discussioncomment-1390789 (troubleshooting with logging)
# - https://github.com/dflock/kitty-save-session
# - https://github.com/akinsho/phoenix-kitty
# TODO: session switching via https://github.com/muchzill4/kitty-session
# NOTE: nvim may need to be be started inside this file using zsh -c 'nvim'
startup_session                         ~/.config/kitty/sessions/mega.conf
#}}}

# --[ os-specific ] -------------------------------------------------------- {{{
draw_minimal_borders                    yes
# alts: titlebar-only, yes
hide_window_decorations                 titlebar-only
# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the background color of the currently active window and finally you can use
# an arbitrary color, such as #12af59 or "red". WARNING: This option works by
# using a hack, as there is no proper Cocoa API for it. It sets the background
# color of the entire window and makes the titlebar transparent. As such it is
# incompatible with background_opacity. If you want to use both, you are
# probably better off just hiding the titlebar with macos_hide_titlebar.
# Match one dark vim title bar background color
macos_titlebar_color                    background
macos_hide_from_tasks                   no
macos_traditional_fullscreen            yes
macos_quit_when_last_window_closed      yes
macos_thicken_font                      0.75
macos_custom_beam_cursor                yes
# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt                     no
macos_show_window_title_in              window
# macos_colorspace                        displayp3
#}}}

# --[ includes ] ----------------------------------------------------------- {{{
# You can include secondary config files via the "include" directive.
# If you use a relative path for include, it is resolved with respect to the
# location of the current config file. For example:
# include ${HOME}/${USER}.conf
# megaforest
include themes/megaforest.conf
#}}}

# --[ misc ] --------------------------------------------------------------- {{{
# or 0, 1, 2 (number of tabs)
# REF: https://sw.kovidgoyal.net/kitty/conf/?highlight=margin#opt-kitty.confirm_os_window_close
confirm_os_window_close               1
dynamic_background_opacity            yes
# url_style can be one of: none, single, double, curly
url_style                             curly
#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly
open_url_modifiers                    super
#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL
open_url_with                         default
#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.
url_prefixes                          http https file ftp
#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.
copy_on_select                        yes
#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::
#:     map cmd+shift+v paste_from_buffer a1
#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.
strip_trailing_spaces never
#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.
rectangle_select_modifiers ctrl+alt
#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)
terminal_select_modifiers shift
#: The modifiers to override mouse selection even when a terminal
#: application has grabbed the mouse
select_by_word_characters @-./_~?&=%+#

sync_to_monitor yes
visual_bell_duration 0
background_opacity 1.0
pointer_shape_when_dragging hand
# How much to dim text that has the DIM/FAINT attribute set. 1.0 means no dimming and
# 0.0 means fully dimmed (i.e. invisible).
allow_hyperlinks yes
close_on_child_death yes
# clipboard_control write-clipboard write-primary read-clipboard
clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

# https://github.com/kovidgoyal/kitty/issues/719
# https://www.reddit.com/r/neovim/comments/qqf4nn/psa_you_can_use_neovim_as_the_kitty_terminal/
# https://www.reddit.com/r/KittyTerminal/comments/l73ulu/pager/
scrollback_pager nvim --noplugin -u ~/.dotfiles/config/nvim/vimrc -c "syntax on|set t_Co=256|set termguicolors|setlocal nomodifiable nonumber nolist showtabline=0 foldcolumn=0 ft=man|colorscheme forestbones" -c "autocmd VimEnter * cnoremap q q!|nnoremap q :q!<CR>|normal G" -c "silent write! /tmp/kitty_scrollback_buffer | te cat /tmp/kitty_scrollback_buffer - "

globinclude maps.conf
map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4
map cmd+5 goto_tab 5
map cmd+6 goto_tab 6
map cmd+7 goto_tab 7
map cmd+8 goto_tab 8
map cmd+9 goto_tab 9

# --[ fin ] --------------------------------------------------------------------
